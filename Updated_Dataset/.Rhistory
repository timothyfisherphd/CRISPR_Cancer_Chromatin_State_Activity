my.small.vector[5:6] <- c(12,14) #adds the values 12 and 14 at the end.
my.small.vector
my.small.vector2
my.small.vector2 <- my.small.vector
my.small.vector2 <- c(-2)
my.small.vector2
seq(-30, 30, by=2)
seq( -30, 30, length.out=10)
rep(c(1, 2, 3,4), times=6)
my.num.vector
names(my.num.vector)
names(my.num.vector) <- c("1st #", "2nd #", "3rd #" , "4th #")
names(my.num.vector)
my.num.vector
#Assigned the vectors names by using the name function.
names(my.num.vector) [3]
length(my.num.vector)
length(my.num.vector) <- 2
my.num.vector
max(my.num.vector)
min(my.num.vector)
which.max(my.num.vector)
which.min(my.num.vector)
#which.min or which.max gives the associated name to the function.
sum(my.num.vector) #it is the summation function
my.matrix <- matrix(nrow=2, ncol=3)
my.matrix
my.matrix[2,3]
my.matrix[2,3] <- 5
my.matrix
my.matrix[2, ]
#returns all of the second row.
my.matrix[2, ][3]
my.matrix[2,3]
my.matrix[,3]
#it will return just the third column
my.matrix[2, c(2,3)]
# has two arguments, wants the the 2nd row and then want to return the 2nd and 3rd column
dim(my.matrix)
#returns the dimensation
rownames(my.matrix)
rownames(my.matrix) <- c("first column", "second column")
rownames(my.matrix)
rownames(my.matrix) <- c("first row", "second row")
rownames(my.matrix)
colnames(my.matrix) <- c("first column", "second column")
colnames(my.matrix) <- c("first column", "second column")
ncol(my.matrix)
colnames(my.matrix) <- c("first column", "second column", "third colum")
colnames(my.matrix)[2]
x <- 1:3
y <- 10:12
x
7
my. row.matrix <- rbind(x,y)
my.row.matrix <- rbind(x,y)
my.row.matrix
my.col.matrix <-cbind(x,y)
my.col.matrix
my.matrix <- matrix(c(1,3,5,6:8), ncol=3, byrow=TRUE)
my.matrix
my.matrix <- matrix(c(1,3,5,6:8, 1), ncol=3, byrow=TRUE)
my.matrix <- matrix(c(1,3,5,6:8, 1, NA, NA), ncol=3, byrow=TRUE)
my.matrix
my.matrix <- matrix(c(1,3,5,6:8), ncol=3, byrow=TRUE)
my.matrix
t(my.col.matrix)
t(my.matrix)
z <- array(1:24, dim=c(2,3,4)) #gives a section of values in a matrix.
my.num.vector
my.num.vector  <- c(1,5,8,10)
my.str.vector <- c("my" "dear", "friend")
my.str.vector <- c("my", "dear", "friend")
my.str.vector
my.log.vector <- c(TRUE, FALSE, FALSE, T, F)
my.log.vector
#all boolean values must be uppercase
my.int.vector <- c(1L, 450L) #L stands for long integer
my.int.vector
my.unknown.vector = c("a", 4, TRUE)
my.unknown.vector
TRUE == "TRUE"
class(my.unknown.vector) #give you the type of function it is
class(my.int.vector)
my.matrix
my.matrix + 1
my.matrix * 2
my.matrix + my.matrix[1,]
my.matrix
my.matrix[1,]
my.matrix * my.matrix
#squares each element
my.matrix %*% my.matrix
dim(my.matrix)
x
x < 3
less3 <- x < 3 #stores the result of that boolean operator
less3
less3[4]
less3[3]
x == 2
which(x==2)
sum(x < 3) #adds/counts in total how many values are true regarding the argument you make. TRUE computes as 1 as FALSE computes as 0
4 != 5
4 %in% x
3 > 2 & 5 < 4
3 > 2 | 5 < 4
!(4 != 5)
patient.id <- c(10, 20, 30)
age <- c(25, 34, 28)
diabets <- c("T1", "T2", "T1")
STATUS <- C("POOR", "Imporved", "Exceleent")
STATUS <- C("Poor", "Improved", "Excellent")
STATUS <- c("Poor", "Improved", "Excellent")
patient.data <- data. frame(patient.id, age, diabets,STATUS)
status <- c("Poor", "Improved", "Excellent")
patient.data <- data. frame(patient.id, age, diabets,stuts)
patient.data <- data. frame(patient.id, age, diabets,status)
patient.data <- data.frame(patient.id, age, diabets,status)
nrow(patient.data)
ncol(patient.data)
dim(patient.data)
patient.data[1:2]
patient.data[patient.data$age ==28, ]
patient.data[patient.data$age ==28, 3]
patient.data$new.vaar <- rep(0, nrow(patient.data))
patient.data
patient.data <- cbind(patient.data, second.var=rep(0, nrow(patient.data)))
patient.data
patient2 <- patient.data
patient.dat <- rbind(patient.data, patient2)
patient.dat
patient.dat <- patient.data
patient.data
patient.dat
patient.data$patient.id
order(patient.data$patient.id)
iris
head(iris)
tail(iris)
v <- c(2,6,10, NA, 3)
v
sum(v)
#total would equate to NA because R does not know what R means
sum (v, na.rm=T) #NA to remove the NA's
is.na(v)
any(is.na(va))
any(is.na(v))
v[is.na(v)] <-0
v
sum(v)
ls()
#ls shows all the object names
rm(x) #to remove anything
x
save.image("day1.RData")
savehistory()
ls()
load("day1RData")
getwd()
setwd("")
install.packages()
installed.packages()
install.packages("gplots")
install.packages("edgeR")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("edgeR")
installed.packages()
?setwd
getwd
getwd()
help(package="gplots")
library("gplots")
heatmap.2()
?heatmap.2
heatmap.2
iris
head(iris)
iris$Species
is.character(iris)
is.character(iris$Species)
as.character(iris$Species)
tqblw(iris$species)
table(iris$Species)
table(iris$Species) / length(iris$Species)
species.char <- as.character(iris$Species)
species.char
str(species.char)
table(species.char)
diabetes <- c("Type 1", "Type2", "Type1", "Type1")
diabetes
diabetes <- factor(diabetes)
diabetes
levels(diabetes)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
diabetes <- factor(diabetes)
diabetes
diabetes[5] <- "Type3"
diabetes.char <- as.character(diabetes)
diabetes.char
diabetes.char[6]
diabetes.char[6] <- "Type6"
diabetes
diabetes <- factor(diabetes,levels=c(levels(diabetes), "Type3"))
diabetes
diabetes[6] <- "Type3"
diabetes
levels(diabetes)
levels(diabetes)[levels(diabetes) == "Type3"] <- "New Type"
diabetes
diabetes <- diabetes[1:4]
diabetes
diabetes <- droplevels(diabetes)
diabetes
as.numeric(diabetes)
myexp <- read.delim("day2.txt", header=T)
myexp <- read.delim("~/Downloads/r/day2.txt", header=T)
str(myexp)
head(myexp)
write.table(myexp, file="day2bis.txt", quote=F, sep="\t", row.names=T, col.names=T)
x <- 2
if (x > 3) {}
if (x > 3) {
print("your number is greater than 3")
} else {
print("your number is less than 3")
}
x <- 4
if (x > 3) {
y <- x * 2
} else {
y <- x
}
y
for(i in 1:nrow(myexp)){
print(i)
}
for(i in 1:nrow(myexp)) {
print(myexp$Abundance[i] * 2)
}
myexp$Abundance
for (i in myexp$Abundance) {}
for (i in myexp$Abundance) {
print(i)
}
m.iris <- data.matrix(iris[,1:4])
sum(m.iris)
data("iris")
apply(m.iris, 1, sum)
apply(m.iris, 2, sum)
apply(m.iris, 2, function (x) sum(x) / length(x))
applt(m.iris, 2, sum) nrow(m.iris)
applt(m.iris, 2, sum) / nrow(m.iris)
apply(m.iris, 2, sum) / nrow(m.iris)
apply(m.iris, 2, mean)
colMeans(m.iris)
x <- 1:6
x
y <- seq(2, 12, by=2)
y
x * 2
cor(x, y)
y <- c(2,6,7,12,12,13)
cor(x, y)
cor(x, y)^2
cor(x, y, method ="spearman")
t.test(x,y)
savehistory()
load("Desktop/MPRA.RData")
barplot(overlaps$V2[order(overlaps$V2)],
names.arg = overlaps$V1[order(overlaps$V2)],
cex.names = 0.5,
xlab = "Chromatin State",
ylab = "Score",
main = "CRISPR scores from MPRA/SHARPR Dataset",
las=2,
cex.axis=0.8,
cex.lab = 0.7,
col = c("blue")
)
savehistory()
load("~/Desktop/MPRA.RData")
load("~/Desktop/day1.RData")
load("~/Desktop/day1.RData")
ggplot(temp, aes(correctedV1, V2)) +
geom_histogram(stat='identity', fill='blue') +
theme_bw() +
labs(x='Chromatin State', y='Score', title='Expression Scores for CRISPR Dataset') +
theme(axis.title = element_text(size=16)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggsave('~/Desktop/somebargraph.pdf', height=6, width=7)
ggplot(temp, aes(correctedV1, V2)) +
geom_histogram(stat='identity', fill='blue') +
theme_bw() +
labs(x='Chromatin State', y='Score', title='Expression Scores for CRISPR Dataset') +
theme(axis.title = element_text(size=16)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggsave('~/Desktop/somebargraph.pdf', height=6, width=7)
overlaps <- read.csv("output.csv", header = F)
View(overlaps)
setwd("~/Desktop/UNIX_Stuff")
firstbar<-read.csv('output.csv')
head(firstbar)
temp <- overlaps
temp$correctedV1 <- gsub('_', ' ', temp$V1)
head(temp)
library(gtools)
temp <- temp[mixedorder(temp$correctedV1),]
temp$correctedV1 <- factor(temp$correctedV1, levels=(mixedsort(temp$correctedV1)))
library(ggplot2)
ggplot(temp, aes(correctedV1, V2)) +
geom_histogram(stat='identity', fill='blue') +
theme_bw() +
labs(x='Chromatin State', y='Score', title='Expression Scores for CRISPR Dataset') +
theme(axis.title = element_text(size=16)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggsave('~/Desktop/somebargraph.pdf', height=6, width=7)
overlaps <- read.csv("output.csv", header = F)
View(overlaps)
setwd("~/Desktop/UNIX_Stuff")
firstbar<-read.csv('output.csv')
head(firstbar)
temp <- overlaps
temp$correctedV1 <- gsub('_', ' ', temp$V1)
head(temp)
library(gtools)
temp <- temp[mixedorder(temp$correctedV1),]
temp$correctedV1 <- factor(temp$correctedV1, levels=(mixedsort(temp$correctedV1)))
library(ggplot2)
ggplot(temp, aes(correctedV1, V2)) +
geom_histogram(stat='identity', fill='blue') +
theme_bw() +
labs(x='Chromatin State', y='Score', title='Expression Scores for CRISPR Dataset') +
theme(axis.title = element_text(size=16)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggsave('~/Desktop/somebargraph.pdf', height=6, width=7)
overlaps <- read.csv("output.csv", header = F)
View(overlaps)
overlaps <- read.csv("output.csv", header = F)
overlaps <- read.csv("output.csv", header = F)
overlaps <- read.csv("output.csv", header = F)
View(overlaps)
setwd("~/Desktop/Ernst_Lab/UNIX/Updated_Dataset")
firstbar1<-read.csv('ceres_output.csv')
head(firstbar1)
overlaps1 <- read.csv("ceres_output.csv", header = F)
View(overlaps1)
temp1 <- overlaps1
temp1$correctedV1 <- gsub('_', ' ', temp1$V1)
head(temp1)
library(gtools)
setwd("~/Desktop/Ernst_Lab/UNIX/Updated_Dataset")
firstbar1<-read.csv('ceres_output.csv')
setwd("~/Desktop/Ernst_Lab/UNIX/Updated_Dataset")
firstbar1<-read.csv('ceres.output.csv')
head(firstbar1)
overlaps1 <- read.csv("ceres.output.csv", header = F)
View(overlaps1)
temp1 <- overlaps1
temp1$correctedV1 <- gsub('_', ' ', temp1$V1)
head(temp1)
library(gtools)
temp1 <- temp1[mixedorder(temp1$correctedV1),]
temp1$correctedV1 <- factor(temp1$correctedV1, levels=(mixedsort(temp1$correctedV1)))
ceres_std_errs <- read_delim("~/Desktop/Ernst Lab/Python/big_project/std_errs.tsv",
+     "\t", escape_double = FALSE, col_names = FALSE,
+     trim_ws = TRUE)
View(ceres_std_errs)
library(readr)
ceres_std_errs <- read_delim("~/Desktop/Ernst_Lab/Python/big_project/ceres_std_errs.csv",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(ceres_std_errs)
cerese_len <- read.csv("../../Python/big_project/length.csv", header = F)
View(ceres_len())
ceres_std_errs <- read_delim("~/Desktop/Ernst_Lab/Python/big_project/ceres_std_errs.csv",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(ceres_std_errs)
library(readr)
ceres_length <- read_csv("~/Desktop/Ernst_Lab/Python/big_project/ceres_length.csv",
col_names = FALSE)
View(ceres_length)
library(ggplot2)
colors = c(rgb(255,0,0, maxColorValue = 255), rgb(255,69,0, maxColorValue = 255), rgb(255,69,0, maxColorValue = 255), rgb(255,69,0, maxColorValue = 255), rgb(0,128,0, maxColorValue = 255), rgb(0,128,0, maxColorValue = 255), rgb(0,128,0, maxColorValue = 255), rgb(0,150,0, maxColorValue = 255), rgb(194,225,5, maxColorValue = 255), rgb(194,225,5, maxColorValue = 255), rgb(194,225,5, maxColorValue = 255), rgb(194,225,5, maxColorValue = 255), rgb(255,195,77, maxColorValue = 255), rgb(255,195,77, maxColorValue = 255), rgb(255,195,77, maxColorValue = 255), rgb(255,255,0, maxColorValue = 255), rgb(255,255,0, maxColorValue = 255), rgb(255,255,0, maxColorValue = 255), rgb(255,255,102, maxColorValue = 255), rgb(102,205,170, maxColorValue = 255), rgb(138,145,208, maxColorValue = 255), rgb(230,184,183, maxColorValue = 255), rgb(112,48,160, maxColorValue = 255), rgb(128,128,128, maxColorValue = 255), rgb(255,255,255, maxColorValue = 255))
library(Hmisc)
ggplot(temp1, aes(x=correctedV1, y=V2, fill=correctedV1)) +
geom_histogram(stat='identity') +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=temp1$V2-std_errs$X2, ymax=temp1$V2+std_errs$X2),
width=.2,
position=position_dodge(.9)) +
scale_fill_manual(values = colors) +
theme_bw() +
labs(x='Chromatin State', y='Score', title='Expression Scores for CERES Dataset') +
theme(axis.title = element_text(size=16)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggsave('~/Desktop/ceres_somebargraph.pdf', height=6, width=7)
library(Hmisc)
ggplot(temp1, aes(x=correctedV1, y=V2, fill=correctedV1)) +
geom_histogram(stat='identity') +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=temp1$V2-std_errs$X2, ymax=temp1$V2+std_errs$X2),
width=.2,
position=position_dodge(.9)) +
scale_fill_manual(values = colors) +
theme_bw() +
labs(x='Chromatin State', y='Score', title='Expression Scores for CERES Dataset') +
theme(axis.title = element_text(size=16)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggsave('~/Desktop/ceres_somebargraph.pdf', height=6, width=7)
ceres_std_errs <- read_delim("~/Desktop/Ernst_Lab/Python/big_project/ceres_std_errs.csv",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(ceres_std_errs)
ceres_length <- read_csv("~/Desktop/Ernst_Lab/Python/big_project/ceres_length.csv",
col_names = FALSE)
View(ceres_length)
library(ggplot2)
colors = c(rgb(255,0,0, maxColorValue = 255), rgb(255,69,0, maxColorValue = 255), rgb(255,69,0, maxColorValue = 255), rgb(255,69,0, maxColorValue = 255), rgb(0,128,0, maxColorValue = 255), rgb(0,128,0, maxColorValue = 255), rgb(0,128,0, maxColorValue = 255), rgb(0,150,0, maxColorValue = 255), rgb(194,225,5, maxColorValue = 255), rgb(194,225,5, maxColorValue = 255), rgb(194,225,5, maxColorValue = 255), rgb(194,225,5, maxColorValue = 255), rgb(255,195,77, maxColorValue = 255), rgb(255,195,77, maxColorValue = 255), rgb(255,195,77, maxColorValue = 255), rgb(255,255,0, maxColorValue = 255), rgb(255,255,0, maxColorValue = 255), rgb(255,255,0, maxColorValue = 255), rgb(255,255,102, maxColorValue = 255), rgb(102,205,170, maxColorValue = 255), rgb(138,145,208, maxColorValue = 255), rgb(230,184,183, maxColorValue = 255), rgb(112,48,160, maxColorValue = 255), rgb(128,128,128, maxColorValue = 255), rgb(255,255,255, maxColorValue = 255))
library(Hmisc)
ggplot(temp1, aes(x=correctedV1, y=V2, fill=correctedV1)) +
geom_histogram(stat='identity') +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=temp1$V2-std_errs$X2, ymax=temp1$V2+std_errs$X2),
width=.2,
position=position_dodge(.9)) +
scale_fill_manual(values = colors) +
theme_bw() +
labs(x='Chromatin State', y='Score', title='Expression Scores for CERES Dataset') +
theme(axis.title = element_text(size=16)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggsave('~/Desktop/ceres_somebargraph.pdf', height=6, width=7)
View(ceres_std_errs)
ggplot(temp1, aes(x=correctedV1, y=V2, fill=correctedV1)) +
geom_histogram(stat='identity') +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=temp1$V2-ceres_std_errs$X2, ymax=temp1$V2+ceres_std_errs$X2),
width=.2,
position=position_dodge(.9)) +
scale_fill_manual(values = colors) +
theme_bw() +
labs(x='Chromatin State', y='Score', title='Expression Scores for CERES Dataset') +
theme(axis.title = element_text(size=16)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggsave('~/Desktop/ceres_somebargraph.pdf', height=6, width=7)
barplot(height, width = 1, space = NULL,
names.arg = NULL, legend.text = NULL, beside = FALSE,
horiz = FALSE, density = NULL, angle = 45,
col = NULL, border = par("fg"),
main = NULL, sub = NULL, xlab = NULL, ylab = NULL,
xlim = NULL, ylim = NULL, xpd = TRUE, log = "",
axes = TRUE, axisnames = TRUE,
cex.axis = par("cex.axis"), cex.names = par("cex.axis"),
inside = TRUE, plot = TRUE, axis.lty = 0, offset = 0,
add = FALSE, args.legend = NULL, ...)
ggplot(data = NULL, mapping = aes(), ..., environment = parent.frame())
ggplot() +
geom_point(data = df, aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red',
width = 0.4
###Infomation about the aes function
# Aesthetic names are automatically standardised
aes(col = x)
aes(fg = x)
aes(color = x)
aes(colour = x)
# aes is almost always used with ggplot() or a layer
ggplot(mpg, aes(displ, hwy)) + geom_point()
ggplot(mpg) + geom_point(aes(displ, hwy))
###How create a barplot w/ SEM using ggplots
# Use dose as a factor rather than numeric
tgc2 <- tgc
tgc2$dose <- factor(tgc2$dose)
# Error bars represent standard error of the mean
ggplot(tgc2, aes(x=dose, y=len, fill=supp)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=len-1, ymax=len+1),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
# Use 95% confidence intervals instead of SEM
ggplot(tgc2, aes(x=dose, y=len, fill=supp)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=len-ci, ymax=len+ci),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
# Use a consistent y range
ymax <- max(dfw_long$value)
ymin <- min(dfw_long$value)
# Plot the individuals
ggplot(dfw_long, aes(x=condition, y=value, colour=subject, group=subject)) +
geom_line() + geom_point(shape=21, fill="white") +
ylim(ymin,ymax)
# Create the normed version of the data
dfwNorm.long <- normDataWithin(data=dfw_long, idvar="subject", measurevar="value")
# Plot the normed individuals
ggplot(dfwNorm.long, aes(x=condition, y=value_norm, colour=subject, group=subject)) +
geom_line() + geom_point(shape=21, fill="white") +
ylim(ymin,ymax)
